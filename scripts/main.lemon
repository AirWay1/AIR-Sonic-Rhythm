
/*
	Sonic Rhythm Code created by AirWay1. Do not redistrubte in mods unless you are given my permission to do so. See render-gameplay.lemon if you are creating skins.
*/

// Define globals.
global bool isPlayingSong = false

global u8 fadeValue = 0
global u8 fadeValue2 = 0
global u8 pauseMenuSelection = 0
global u8 songMenuSelection = 0

global u8 player.Health
global u8 player.State

global s64 player.latestGoodLEFTPress = 0
global s64 player.latestGoodDOWNPress = 0
global s64 player.latestGoodUPPress = 0
global s64 player.latestGoodRIGHTPress = 0

global u16 song.BPM = 0
global u64 song.Score = 0
global s32 song.Timer = 0
global s32 song.TrackTimer
global u8 song.Rating.Timer = 0
global u8 song.Rating.Name = 0

global u8 sonicRhythm.NoteStyle
global u8 sonicRhythm.ScrollDir
global bool sonicRhythm.Botplay
global bool sonicRhythm.Hitsounds
global u8 sonicRhythm.Scrolly

global bool sonicRhythm.Paused = false

// Inclusions.
include defines
include song-select
include render-gameplay

include charts/?
include config/?
include util/?

function void setupNote(u8 type, s64 delay, u64 hitsound)	// Shortcut for non-mines
{
	setupNote(type, delay, false, hitsound)
}

function void setupNote(u8 type, s64 delay, bool isMine, u64 hitsound)
{
	// song.BPM / 60

	s64 noteDelay = (delay - song.Timer + sonicRhythm.Offset_n + 100) + (song.BPM / 60)
	if (sonicRhythm.Scrolly != 1)
	{
		noteDelay += delay * (sonicRhythm.Scrolly - 1)
		noteDelay += calculateExtendedNoteDelay()
	}

	s8 delayedEnd = ((sonicRhythm.Scrolly < 0x04) ? -1 : (sonicRhythm.Scrolly == 0x0a) ? -8 : -2)

	if (noteDelay < delayedEnd)
		return

	if (player.State == player.state.gameOver)
		return
	
	if (noteDelay > 200)
		return

	if (type == 1)
	{
		if (player.latestGoodLEFTPress >= delay)
			return

		if (((control.pad1.pressed & CONTROL_LEFT) || (sonicRhythm.Botplay)) && (noteDelay <= 30 + sonicRhythm.Scrolly))
		{
			if (!doSharedNoteOptions(noteDelay, hitsound))
				return

			player.latestGoodLEFTPress = delay
		}
		if (noteDelay <= 0)
		{
			//System.writeDisplayLine("miss")
			player.Health -= 2
			player.latestGoodLEFTPress = delay

			song.Score -= 5

			playSound(0x67)
		}
		rendering.Note("left_note", noteDelay, 0, false, 0x3000, 0xff)
	}
	else if (type == 2)
	{
		if (player.latestGoodDOWNPress >= delay)
			return

		if (((control.pad1.pressed & CONTROL_DOWN) || (sonicRhythm.Botplay)) && (noteDelay <= 30 + sonicRhythm.Scrolly))
		{
			if (!doSharedNoteOptions(noteDelay, hitsound))
				return

			player.latestGoodDOWNPress = delay
		}
		if (noteDelay <= 0)
		{
			//System.writeDisplayLine("miss")
			player.Health -= 2
			player.latestGoodDOWNPress = delay

			song.Score -= 5

			playSound(0x67)
		}
		rendering.Note("down_note", noteDelay, 1, false, 0x3000, 0xff)
	}
	else if (type == 3)
	{
		if (player.latestGoodUPPress >= delay)
			return

		if (((control.pad1.pressed & CONTROL_UP) || (sonicRhythm.Botplay)) && (noteDelay <= 30 + sonicRhythm.Scrolly))
		{
			if (!doSharedNoteOptions(noteDelay, hitsound))
				return

			player.latestGoodUPPress = delay
		}
		if (noteDelay <= 0)
		{
			//System.writeDisplayLine("miss")
			player.Health -= 2
			player.latestGoodUPPress = delay

			song.Score -= 5

			playSound(0x67)
		}
		rendering.Note("up_note", noteDelay, 2, false, 0x3000, 0xff)
	}
	else if (type == 4)
	{
		if (player.latestGoodRIGHTPress >= delay)
			return

		if (((control.pad1.pressed & CONTROL_RIGHT) || (sonicRhythm.Botplay)) && (noteDelay <= 30 + sonicRhythm.Scrolly))
		{
			if (!doSharedNoteOptions(noteDelay, hitsound))
				return

			player.latestGoodRIGHTPress = delay
		}
		if (noteDelay <= 0)
		{
			//System.writeDisplayLine("miss")
			player.Health -= 2
			player.latestGoodRIGHTPress = delay

			song.Score -= 5

			playSound(0x67)
		}
		rendering.Note("right_note", noteDelay, 3, false, 0x3000, 0xff)
	}
}

function void setupLongNote(u8 type, s64 delay, u16 length)	// Shortcut for non-mines
{
	setupLongNote(type, delay, length, false)
}

// If anyone knows how to hide notes past the judgement line when hit like a normal note... please fork it and pull request it... *dies of coding*
function void setupLongNote(u8 type, s64 delay, u16 length, bool isMine)
{
	s64 noteDelay = (delay - song.Timer + sonicRhythm.Offset_n + 100) + (song.BPM / 60)
	if (sonicRhythm.Scrolly != 1)
	{
		noteDelay += delay * (sonicRhythm.Scrolly - 1)
		noteDelay += calculateExtendedNoteDelay()

		length += length * (sonicRhythm.Scrolly - 1)
	}

	if (player.State == player.state.gameOver)
		return
	
	if (noteDelay > 200)
		return

	if (type == 1)
	{
		if (noteDelay + length < -1)
			return

		for (s8 i = -1; i <= length / 0x14; i += 1)
		{
			if (noteDelay + (i * 0x14) < 250)
			{
				if (player.latestGoodLEFTPress < delay + i)
				{
					rendering.Note(((i == -1) ? "long_left_note_begin" : "long_left_note"), calculateLongNotePosition(i, noteDelay), 0, false, 0x2950, 0x8d)
				}
			}
		}

		rendering.Note("long_left_note_end", calculateLongNotePosition_Length(length, noteDelay), 0, false, 0x2980, 0x8d)

		if (noteDelay <= sonicRhythm.Scrolly)
		{
			player.latestGoodLEFTPress = delay

			longNoteState(CONTROL_LEFT)
		}
	}
	else if (type == 2)
	{
		if (noteDelay + length < -1)
			return

		for (s8 i = -1; i <= length / 0x14; i += 1)
		{
			if (noteDelay + (i * 0x14) < 250)
			{
				if (player.latestGoodDOWNPress < delay + i)
				{
					rendering.Note(((i == -1) ? "long_down_note_begin" : "long_down_note"), calculateLongNotePosition(i, noteDelay), 1, false, 0x2950, 0x8d)
				}
			}
		}

		rendering.Note("long_down_note_end", calculateLongNotePosition_Length(length, noteDelay), 1, false, 0x2980, 0x8d)

		if (noteDelay <= sonicRhythm.Scrolly)
		{
			player.latestGoodDOWNPress = delay

			longNoteState(CONTROL_DOWN)
		}
	}
	else if (type == 3)
	{
		if (noteDelay + length < -1)
			return

		for (s8 i = -1; i <= length / 0x14; i += 1)
		{
			if (noteDelay + (i * 0x14) < 250)
			{
				if (player.latestGoodUPPress < delay + i)
				{
					rendering.Note(((i == -1) ? "long_up_note_begin" : "long_up_note"), calculateLongNotePosition(i, noteDelay), 2, false, 0x2950, 0x8d)
				}
			}
		}

		rendering.Note("long_up_note_end", calculateLongNotePosition_Length(length, noteDelay), 2, false, 0x2980, 0x8d)

		if (noteDelay <= sonicRhythm.Scrolly)
		{
			player.latestGoodUPPress = delay

			longNoteState(CONTROL_UP)
		}
	}
	else if (type == 4)
	{
		if (noteDelay + length < -1)
			return

		for (s8 i = -1; i <= length / 0x14; i += 1)
		{
			if (noteDelay + (i * 0x14) < 250)
			{
				if (player.latestGoodRIGHTPress < delay + i)
				{
					rendering.Note(((i == -1) ? "long_right_note_begin" : "long_right_note"), calculateLongNotePosition(i, noteDelay), 3, false, 0x2950, 0x8d)
				}
			}
		}

		rendering.Note("long_right_note_end", calculateLongNotePosition_Length(length, noteDelay), 3, false, 0x2980, 0x8d)

		if (noteDelay <= sonicRhythm.Scrolly)
		{
			player.latestGoodRIGHTPress = delay

			longNoteState(CONTROL_RIGHT)
		}
	}
}

function s16 calculateLongNotePosition(s8 currentID, s64 noteDelay)
{
	s16 returnPos = noteDelay + (currentID * 0x14) + (0x14 + sonicRhythm.Scrolly)
	if (currentID == -1)
		returnPos += 10

	return returnPos
}

function s16 calculateLongNotePosition_Length(u16 currentID, s64 noteDelay)
{
	s16 returnPos = noteDelay + currentID + (0x14 + (sonicRhythm.Scrolly * 2))
	return returnPos
}

function s64 calculateExtendedNoteDelay()
{
	// 2 4 8 a
	u16 calculativeVariable = ((sonicRhythm.Scrolly == 0x02) ? 40 : (sonicRhythm.Scrolly == 0x04) ? 60 : (sonicRhythm.Scrolly == 0x08) ? 80 : 70)
	return calculativeVariable * (sonicRhythm.Scrolly)
}

function void longNoteState(u8 controlDir)
{
	if ((control.pad1.state & controlDir) || (sonicRhythm.Botplay))
	{
		if (song.Timer % 5 == 0)
			song.Score += 1
	}
	else
	{
		if (song.TrackTimer % 4 == 0)	// Its better to use TrackTimer here than Timer for obvious reasons.
		{
			player.Health -= 1
			song.Score -= 1

			playSound(0x67)
		}
	}
}

function bool noteCalculation(s64 delayed)
{
	delayed -= 20
	if (delayed < 0)
		delayed += 10
	u8 newPlayerHealth = player.Health
	bool shouldCancelNote = false

	if (delayed == 0)	// Super rating
	{
		song.Rating.Name = song.Rating_SUPER
		newPlayerHealth += 2

		song.Score += 10
	}
	else if ((delayed >= 1) && (delayed <= 6 + sonicRhythm.Scrolly))	// Great rating
	{
		song.Rating.Name = song.Rating_GREAT
		newPlayerHealth += 1

		song.Score += 5
	}
	else	// Good rating
	{
		song.Rating.Name = song.Rating_GOOD

		song.Score += 1
	}

	/*else	// Miss rating
	{
		song.Rating.Name = song.Rating_MISS
		newPlayerHealth -= 1
	}

	else	// https://twitter.com/ootspongebob
	{
		System.writeDisplayLine("out of touch")
		shouldCancelNote = true
	}*/

	if (newPlayerHealth > 20)
		player.Health = 20
	else
		player.Health = newPlayerHealth

	// System.writeDisplayLine(stringformat("%d", newPlayerHealth))

	return shouldCancelNote
}

function bool doSharedNoteOptions(s64 notey, u64 hitsound)
{
	if (sonicRhythm.Botplay)
	{
		if (notey != 20)
			return false

		if (sonicRhythm.Hitsounds)
			playSound(0x99)
	}

	if (noteCalculation(notey))
		return false

	if ((hitsound != "") && (sonicRhythm.Hitsounds))
		Audio.playAudio(hitsound)

	song.Rating.Timer = 255
	return true
}

function void resetSongVars()	// Reset everything in preperation for the next song.
{
	fadeValue = 0
	fadeValue2 = 0

	player.Health = 20
	player.State = player.state.playingSong

	player.latestGoodLEFTPress = -10	// These values are negative to allow for 0 frame beats.
	player.latestGoodDOWNPress = -10
	player.latestGoodUPPress = -10
	player.latestGoodRIGHTPress = -10

	song.Timer = 0
	song.TrackTimer = 0
	song.Rating.Timer = 0
	song.Rating.Name = 0
	song.Score = 0

	sonicRhythm.Paused = false
}

function void eventNote(s64 delay, u64 eventType, u64 eventData)
{
	s64 eventDelay = (delay - song.Timer + sonicRhythm.Offset_n + 100) + (song.BPM / 60)
	if (sonicRhythm.Scrolly != 1)
	{
		eventDelay += delay * (sonicRhythm.Scrolly - 1)
		eventDelay += calculateExtendedNoteDelay()
	}

	if (eventType == "End Song")
	{
		if (eventDelay <= 20)
		{
			if (eventDelay == 20)
				Audio.fadeOutChannel(0, 200)
			else if (eventDelay == -280)
			{
				playMusic(MUSIC_EXTRALIFE)

				isPlayingSong = false
				playRandomTrack()
			}
		}
	}
}

function void state.GameOver()
{
	if (fadeValue != 0x8d)
		fadeValue += 3

	if (fadeValue2 != 0xff)
		fadeValue2 += 5

	if (fadeValue == 0x03)
	{
		Audio.stopChannel(0)

		playSound(0x37)
		playSound(MUSIC_GAMEOVER)
	}

	if (control.pad1.pressed & CONTROL_A)
	{
		resetSongVars()
		Audio.stopChannel(0)
		isPlayingSong = true

		playSound(0xaf)
	}
}

function void state.MainLoop()
{
	if (player.State != player.state.gameOver)
	{
		song.Timer += sonicRhythm.Scrolly	// Do it by scrolly lol
		song.TrackTimer += 1	// Do this one by 1, since TrackTimer is consistant.
	}

	if (song.TrackTimer == 80)	// Start playing the music if the trackTimer is at 80 specifically.
	{
		audioSelection(false)
	}
	
	drawSongChart()
}

function void ratingHandler()
{
	if (song.Rating.Timer == 0)	// Timer is equal to zero? Do not need to run said code.
		return

	u64 key = "rating_super"	// Defined as "rating_super" so we do not have to make more code. Clean and simple.

	if (song.Rating.Name == song.Rating_GREAT)
		key = "rating_great"
	else if (song.Rating.Name == song.Rating_GOOD)
		key = "rating_good"
	else if (song.Rating.Name == song.Rating_MISS)
		key = "rating_miss"

	rendering.Rating(key)

	song.Rating.Timer -= 5
}